{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\troll\\\\web-test-sql\\\\src\\\\Searchbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onSearch\n}) => {\n  _s();\n  const [purchaseId, setPurchaseId] = useState('');\n  const handleSearch = () => {\n    onSearch(purchaseId);\n  };\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setPurchaseId(value);\n  };\n  useEffect(() => {\n    // Fetch matched records based on the input value\n    const fetchMatchedRecords = async () => {\n      try {\n        const response = await fetch(`http://localhost:5466/api/cars?search=${purchaseId}`);\n        const data = await response.json();\n        setMatchedRecords(data);\n      } catch (error) {\n        console.error('Error fetching matched records:', error);\n      }\n    };\n\n    // Fetch only if the input value is not empty\n    if (purchaseId.trim() !== '') {\n      fetchMatchedRecords();\n    } else {\n      setMatchedRecords([]); // Clear matched records when the input is empty\n    }\n  }, [purchaseId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"purchaseId\",\n      children: \"Enter Purchase ID:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"purchaseId\",\n      value: purchaseId,\n      onChange: handleInputChange,\n      placeholder: \"Enter an identification number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), matchedRecords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Matched Records:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: matchedRecords.map(record => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: record.purchase_id\n        }, record.purchase_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)\n        // You can customize the display of matched records as needed\n        )\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"XSiI7H12LLUPLh+mFqig/IdhWI4=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SearchBar","onSearch","_s","purchaseId","setPurchaseId","handleSearch","handleInputChange","e","value","target","useEffect","fetchMatchedRecords","response","fetch","data","json","setMatchedRecords","error","console","trim","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","onClick","matchedRecords","length","map","record","purchase_id","_c","$RefreshReg$"],"sources":["C:/Users/troll/web-test-sql/src/Searchbar.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SearchBar = ({ onSearch }) => {\r\n  const [purchaseId, setPurchaseId] = useState('');\r\n\r\n  const handleSearch = () => {\r\n    onSearch(purchaseId);\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const value = e.target.value;\r\n    setPurchaseId(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch matched records based on the input value\r\n    const fetchMatchedRecords = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5466/api/cars?search=${purchaseId}`);\r\n        const data = await response.json();\r\n        setMatchedRecords(data);\r\n      } catch (error) {\r\n        console.error('Error fetching matched records:', error);\r\n      }\r\n    };\r\n\r\n    // Fetch only if the input value is not empty\r\n    if (purchaseId.trim() !== '') {\r\n      fetchMatchedRecords();\r\n    } else {\r\n      setMatchedRecords([]); // Clear matched records when the input is empty\r\n    }\r\n  }, [purchaseId]);\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"purchaseId\">Enter Purchase ID:</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"purchaseId\"\r\n        value={purchaseId}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Enter an identification number\"\r\n      />\r\n      <button onClick={handleSearch}>Search</button>\r\n\r\n      {matchedRecords.length > 0 && (\r\n        <div>\r\n          <h4>Matched Records:</h4>\r\n          <ul>\r\n            {matchedRecords.map((record) => (\r\n              <li key={record.purchase_id}>{record.purchase_id}</li>\r\n              // You can customize the display of matched records as needed\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzBJ,QAAQ,CAACE,UAAU,CAAC;EACtB,CAAC;EAED,MAAMG,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACD,KAAK;IAC5BJ,aAAa,CAACI,KAAK,CAAC;EACtB,CAAC;EAEDE,SAAS,CAAC,MAAM;IACd;IACA,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACtC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,yCAAwCV,UAAW,EAAC,CAAC;QACnF,MAAMW,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClCC,iBAAiB,CAACF,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;IACF,CAAC;;IAED;IACA,IAAId,UAAU,CAACgB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC5BR,mBAAmB,CAAC,CAAC;IACvB,CAAC,MAAM;MACLK,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACb,UAAU,CAAC,CAAC;EAEhB,oBACEJ,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAOsB,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACtD1B,OAAA;MACE2B,IAAI,EAAC,MAAM;MACXC,EAAE,EAAC,YAAY;MACfnB,KAAK,EAAEL,UAAW;MAClByB,QAAQ,EAAEtB,iBAAkB;MAC5BuB,WAAW,EAAC;IAAgC;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACF1B,OAAA;MAAQ+B,OAAO,EAAEzB,YAAa;MAAAe,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE7CM,cAAc,CAACC,MAAM,GAAG,CAAC,iBACxBjC,OAAA;MAAAqB,QAAA,gBACErB,OAAA;QAAAqB,QAAA,EAAI;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzB1B,OAAA;QAAAqB,QAAA,EACGW,cAAc,CAACE,GAAG,CAAEC,MAAM,iBACzBnC,OAAA;UAAAqB,QAAA,EAA8Bc,MAAM,CAACC;QAAW,GAAvCD,MAAM,CAACC,WAAW;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA0B;QACrD;QACD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CAzDIF,SAAS;AAAAoC,EAAA,GAATpC,SAAS;AA2Df,eAAeA,SAAS;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}