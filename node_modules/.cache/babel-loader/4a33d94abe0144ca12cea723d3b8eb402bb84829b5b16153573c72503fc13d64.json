{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\troll\\\\web-test-sql\\\\src\\\\Searchbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = ({\n  onSearch\n}) => {\n  _s();\n  const [purchaseId, setPurchaseId] = useState('');\n  const [error, setError] = useState('');\n  const handleSearch = () => {\n    // Ensure only numeric characters are included in the search\n    const sanitizedPurchaseId = purchaseId.replace(/[^0-9]/g, '');\n    if (!sanitizedPurchaseId) {\n      setError('ID must be numerical');\n      return; // Don't proceed with the search if the ID is not numerical\n    }\n    onSearch(sanitizedPurchaseId);\n    setError(''); // Clear any previous error\n  };\n  const handleChange = e => {\n    // Ensure only numeric characters are allowed in the input\n    const sanitizedValue = e.target.value.replace(/[^0-9]/g, '');\n    setPurchaseId(sanitizedValue);\n    setError(''); // Clear error when input changes\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"purchaseId\",\n      children: \"Enter brand/model: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"purchaseId\",\n      value: purchaseId,\n      onChange: handleChange,\n      placeholder: \"Enter Purchase ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), purchaseId.trim() !== '' && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSearch,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"Mk4XlVXl102C61QFG13wygo8ga8=\");\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SearchBar","onSearch","_s","purchaseId","setPurchaseId","error","setError","handleSearch","sanitizedPurchaseId","replace","handleChange","e","sanitizedValue","target","value","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","placeholder","trim","onClick","style","color","_c","$RefreshReg$"],"sources":["C:/Users/troll/web-test-sql/src/Searchbar.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SearchBar = ({ onSearch }) => {\r\n    const [purchaseId, setPurchaseId] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n  const handleSearch = () => {\r\n    // Ensure only numeric characters are included in the search\r\n    const sanitizedPurchaseId = purchaseId.replace(/[^0-9]/g, '');\r\n\r\n    if (!sanitizedPurchaseId) {\r\n      setError('ID must be numerical');\r\n      return; // Don't proceed with the search if the ID is not numerical\r\n    }\r\n\r\n    onSearch(sanitizedPurchaseId);\r\n    setError(''); // Clear any previous error\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    // Ensure only numeric characters are allowed in the input\r\n    const sanitizedValue = e.target.value.replace(/[^0-9]/g, '');\r\n    setPurchaseId(sanitizedValue);\r\n    setError(''); // Clear error when input changes\r\n\r\n  };\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"purchaseId\">Enter brand/model: </label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"purchaseId\"\r\n        value={purchaseId}\r\n        onChange={handleChange}\r\n        placeholder=\"Enter Purchase ID\"\r\n      />\r\n      {purchaseId.trim() !== '' && (\r\n        <button onClick={handleSearch}>Search</button>\r\n      )}\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,mBAAmB,GAAGL,UAAU,CAACM,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAE7D,IAAI,CAACD,mBAAmB,EAAE;MACxBF,QAAQ,CAAC,sBAAsB,CAAC;MAChC,OAAO,CAAC;IACV;IAEAL,QAAQ,CAACO,mBAAmB,CAAC;IAC7BF,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChB,CAAC;EAED,MAAMI,YAAY,GAAIC,CAAC,IAAK;IAC1B;IACA,MAAMC,cAAc,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAACL,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAC5DL,aAAa,CAACQ,cAAc,CAAC;IAC7BN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAEhB,CAAC;EACD,oBACEP,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAOiB,OAAO,EAAC,YAAY;MAAAD,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvDrB,OAAA;MACEsB,IAAI,EAAC,MAAM;MACXC,EAAE,EAAC,YAAY;MACfR,KAAK,EAAEX,UAAW;MAClBoB,QAAQ,EAAEb,YAAa;MACvBc,WAAW,EAAC;IAAmB;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EACDjB,UAAU,CAACsB,IAAI,CAAC,CAAC,KAAK,EAAE,iBACvB1B,OAAA;MAAQ2B,OAAO,EAAEnB,YAAa;MAAAQ,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAC9C,EACAf,KAAK,iBAAIN,OAAA;MAAG4B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAb,QAAA,EAAEV;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAAClB,EAAA,CAxCIF,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}